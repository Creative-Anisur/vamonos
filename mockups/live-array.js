// Generated by CoffeeScript 1.4.0
var LiveArrayMockup;

LiveArrayMockup = (function() {

  function LiveArrayMockup(_arg) {
    var container, initialarray, v, _i, _len,
      _this = this;
    container = _arg.container, this.separator = _arg.separator, initialarray = _arg.initialarray;
    this.$container = container;
    this.theArray = [];
    this.$inputBox = null;
    this.editingIndex = null;
    this.$arrayTbl = $("<table>", {
      "class": "array"
    }).append($("<tr>", {
      "class": "array-indices"
    }), $("<tr>", {
      "class": "array-cells"
    }), $("<tr>", {
      "class": "array-annotations"
    }));
    this.$container.append(this.$arrayTbl);
    if (initialarray.length) {
      for (_i = 0, _len = initialarray.length; _i < _len; _i++) {
        v = initialarray[_i];
        this.appendCell(v);
      }
    } else {
      this.appendCell(null);
    }
    this.$arrayTbl.on("click", "tr.array-cells td", {}, function(e) {
      return _this.tdClick(e);
    });
  }

  LiveArrayMockup.prototype.valueEncode = function(txt) {
    if (isNaN(parseInt(txt))) {
      return null;
    } else {
      return parseInt(txt);
    }
  };

  LiveArrayMockup.prototype.valueDecode = function(txt) {
    return txt;
  };

  LiveArrayMockup.prototype.valueValid = function(txt) {
    return this.valueEncode(txt) != null;
  };

  LiveArrayMockup.prototype.tdClick = function(event) {
    if (!((this.$inputBox != null) && event.target === this.$inputBox.get(0))) {
      return this.startEditing($(event.target).index());
    }
  };

  LiveArrayMockup.prototype.startEditing = function(index) {
    var $tgt,
      _this = this;
    if (index === this.editingIndex) {
      return;
    }
    if ((this.editingIndex != null)) {
      this.endEditing(true);
    }
    $tgt = this.getNthCell(index);
    this.editingIndex = index;
    this.$inputBox = $("<input class='live-input'>");
    this.$inputBox.val(this.theArray[index]);
    this.$inputBox.width($tgt.width());
    this.$inputBox.on("blur", function(e) {
      return _this.endEditing(true);
    });
    this.$inputBox.on("keydown", function(e) {
      return _this.inpKeyDown(e);
    });
    $tgt.html(this.$inputBox);
    $tgt.addClass("editing");
    this.$inputBox.focus();
    return this.$inputBox.select();
  };

  LiveArrayMockup.prototype.endEditing = function(save) {
    var $activechild, dead, last, txt;
    if (!((this.editingIndex != null) && (this.$inputBox != null))) {
      return;
    }
    $activechild = this.getNthCell(this.editingIndex);
    last = this.editingIndex === this.theArray.length - 1;
    txt = $activechild.find("input").val();
    dead = last && this.editingIndex !== 0 && ((save && !this.valueValid(txt)) || (!save && !(this.theArray[this.editingIndex] != null)));
    if (dead) {
      this.chopLastCell();
    } else if (save && this.valueValid(txt)) {
      this.theArray[this.editingIndex] = this.valueEncode(txt);
    }
    $activechild.html("" + this.valueDecode(this.theArray[this.editingIndex]));
    $activechild.removeClass("editing");
    this.editingIndex = null;
    return this.$inputBox = null;
  };

  LiveArrayMockup.prototype.inpKeyDown = function(event) {
    var elt, k, shift, txt;
    k = event.keyCode;
    shift = event.shiftKey;
    if (k === 13) {
      this.endEditing(true);
      return false;
    }
    if (k === 32 || (!shift && k === 9)) {
      this.setNextActive();
      return false;
    }
    if (shift && k === 9) {
      this.setPrevActive();
      return false;
    }
    if (k === 8 && this.$inputBox.val() === "") {
      this.setPrevActive();
      return false;
    }
    if (k === 37) {
      elt = this.$inputBox.get(0);
      if (elt.selectionStart === 0 && elt.selectionEnd === 0) {
        this.setPrevActive();
        return false;
      }
    }
    if (k === 39) {
      txt = this.$inputBox.val();
      elt = this.$inputBox.get(0);
      if (elt.selectionStart === txt.length && elt.selectionEnd === txt.length) {
        this.setNextActive();
        return false;
      }
    }
    if (k === 27) {
      this.endEditing(false);
      return false;
    }
  };

  LiveArrayMockup.prototype.getNthCell = function(n) {
    return this.$arrayTbl.find(".array-cells").children().eq(n);
  };

  LiveArrayMockup.prototype.setNextActive = function() {
    if (this.editingIndex === this.theArray.length - 1) {
      if (!this.valueValid(this.$inputBox.val())) {
        return;
      }
      this.appendCell(null);
    }
    return this.startEditing(this.editingIndex + 1);
  };

  LiveArrayMockup.prototype.setPrevActive = function() {
    if (this.editingIndex > 0) {
      return this.startEditing(this.editingIndex - 1);
    }
  };

  LiveArrayMockup.prototype.appendCell = function(val) {
    var newindex;
    newindex = this.theArray.length;
    this.theArray.push(val);
    this.$arrayTbl.find(".array-indices").append("<td>" + newindex + "</td>");
    this.$arrayTbl.find(".array-cells").append($("<td>", {
      text: this.valueDecode(val)
    }));
    return this.$arrayTbl.find(".array-annotations").append("<td></td>");
  };

  LiveArrayMockup.prototype.chopLastCell = function() {
    var i;
    i = this.theArray.length;
    this.theArray.length--;
    return this.$arrayTbl.find("td:last-child").remove();
  };

  return LiveArrayMockup;

})();
