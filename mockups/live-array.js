// Generated by CoffeeScript 1.4.0
var LiveArrayMockup,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

LiveArrayMockup = (function() {

  function LiveArrayMockup(_arg) {
    var container, initialarray;
    container = _arg.container, this.separator = _arg.separator, initialarray = _arg.initialarray;
    this.keydownhandler = __bind(this.keydownhandler, this);

    this.$container = container;
    this.value = [null];
    this.activeindex = null;
    this.initArray(initialarray);
  }

  LiveArrayMockup.prototype.tdclickhandler = function(event) {
    return this.setactive($(event.target).index());
  };

  LiveArrayMockup.prototype.setactive = function(i) {
    var $tgt;
    if (i === this.activeindex) {
      return;
    }
    if ((this.activeindex != null)) {
      this.deactivate();
    }
    $tgt = this.$array.find(".array-cells").children().eq(i);
    this.activeindex = i;
    this.$inputbox = $("<input class='live-input'>");
    this.$inputbox.val(this.value[i]);
    this.$inputbox.width($tgt.width());
    $tgt.html(this.$inputbox);
    this.$inputbox.focus();
    return this.$inputbox.select();
  };

  LiveArrayMockup.prototype.deactivate = function() {
    var $activechild;
    if (this.activeindex == null) {
      return;
    }
    $activechild = this.getnthcell(this.activeindex);
    this.value[this.activeindex] = $activechild.find("input").val();
    $activechild.html(this.value[this.activeindex]);
    if (this.activeindex === this.value.length - 1 && this.activeindex > 0 && (!(this.value[this.activeindex] != null) || this.value[this.activeindex] === "")) {
      this.chopLastCell();
    }
    return this.activeindex = null;
  };

  LiveArrayMockup.prototype.keydownhandler = function(event) {
    if (event.keyCode === 13) {
      this.deactivate();
      return false;
    }
    if (event.keyCode === 32 || (!event.shiftKey && event.keyCode === 9)) {
      this.setnextactive();
      return false;
    }
    if (event.shiftKey && event.keyCode === 9) {
      this.setprevactive();
      return false;
    }
    if (event.keyCode === 8 && this.$inputbox.val() === "") {
      this.setprevactive();
      return false;
    }
  };

  LiveArrayMockup.prototype.getnthcell = function(n) {
    return this.$array.find(".array-cells").children().eq(n);
  };

  LiveArrayMockup.prototype.setnextactive = function() {
    if (this.activeindex === this.value.length - 1) {
      this.appendCell();
    }
    return this.setactive(this.activeindex + 1);
  };

  LiveArrayMockup.prototype.setprevactive = function() {
    if (this.activeindex === 0) {
      return;
    }
    return this.setactive(this.activeindex - 1);
  };

  LiveArrayMockup.prototype.appendCell = function() {
    var newindex;
    newindex = this.value.length;
    this.value.length++;
    this.$array.find(".array-indices").append("<td>" + newindex + "</td>");
    this.$array.find(".array-cells").append("<td></td>");
    return this.$array.find(".array-annotations").append("<td></td>");
  };

  LiveArrayMockup.prototype.chopLastCell = function() {
    var i;
    i = this.value.length;
    this.value.length--;
    return this.$array.find("td:last-child").remove();
  };

  LiveArrayMockup.prototype.initArray = function(arr) {
    var _this = this;
    this.$array = $("<table class='array'>\n<tr class='array-indices'><td>0</td></tr>\n<tr class='array-cells'><td></td></tr>\n<tr class='array-annotations'><td></td></tr>\n</table>");
    this.$container.append(this.$array);
    this.$array.on("click", "td", {}, function(e) {
      return _this.tdclickhandler(e);
    });
    this.$array.on("blur", "input", {}, function(e) {
      return _this.deactivate(e);
    });
    return this.$array.on("keydown", "input", {}, function(e) {
      return _this.keydownhandler(e);
    });
  };

  return LiveArrayMockup;

})();
