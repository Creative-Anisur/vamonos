// Generated by CoffeeScript 1.4.0
var WidgetTest,
  __slice = [].slice;

WidgetTest = (function() {

  WidgetTest.prototype.HTML = "<div id=\"wt-controls\">\n    <table>\n        <tr id=\"wt-constructor-tr\"><th colspan=2>widget constructor:</th></tr>\n        <tr><td></td><td><button id=\"wt-constructor\">create widget</button></td></tr>\n        <tr><th colspan=2>basic events:</th></tr>\n        <tr><td colspan=2>\n            <button class=\"wt-event-button\" id=\"wt-setup\">setup</button>\n            <button class=\"wt-event-button\" id=\"wt-editStart\">editStart</button>\n            <button class=\"wt-event-button\" id=\"wt-editStop\">editStop</button><br>\n            <button class=\"wt-event-button\" id=\"wt-displayStart\">displayStart</button>\n            <button class=\"wt-event-button\" id=\"wt-displayStop\">displayStop</button>\n            <button class=\"wt-event-button\" id=\"wt-destroy\">destroy</button>\n        </th></tr>\n        <tr><th colspan=2>render event:</th></tr>\n        <tr id=\"wt-render-tr\"><td>varname</td><td>value</td></tr>\n        <tr><td><input class=\"wt-varname\" id=\"wt-varname1\"></td><td><input type=\"text\" id=\"wt-varvalue1\"></td></tr>\n        <tr><td><input class=\"wt-varname\" id=\"wt-varname2\"></td><td><input type=\"text\" id=\"wt-varvalue2\"></td></tr>\n        <tr><td><input class=\"wt-varname\" id=\"wt-varname3\"></td><td><input type=\"text\" id=\"wt-varvalue3\"></td></tr>\n        <tr><td>\n            <select id=\"wt-render-type\">\n                <option>next</option>                \n                <option>prev</option>                \n                <option>init</option>                \n                <option>jump</option></select>\n        </td><td><button id=\"wt-render\">send event</button></td></tr>\n        <tr><th colspan=2>stash:</th></tr>\n        <tr><td colspan=2><textarea id=\"wt-stash\"></textarea></td></tr>\n        <tr><td colspan=2>\n            <button id=\"wt-showstash\">show stash</button>\n            <button id=\"wt-setstash\">set stash</button>\n        </td></tr>\n        <tr id=\"wt-css-tr\"><th colspan=2>container css options:</th></tr>\n    </table>\n</div>\n<div id=\"wt-log-container\">\n    <b>log:</b>\n    <textarea id=\"wt-log\"></textarea>\n</div>\n\n<div id=\"wt-widget-title\">widget:</div>\n<div id=\"wt-container\" class=\"container\"></div>";

  function WidgetTest(_arg) {
    var addCssOption, attr, cssOptions, defaultFrameVars, defaultVal, e, i, o, preprocessContainer, setupEventButton, type, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4,
      _this = this;
    this.objConstructor = _arg.objConstructor, this.constructorArgs = _arg.constructorArgs, cssOptions = _arg.cssOptions, defaultFrameVars = _arg.defaultFrameVars, preprocessContainer = _arg.preprocessContainer;
    $("body").append(this.HTML);
    if ((_ref = this.constructorArgs) == null) {
      this.constructorArgs = [];
    }
    if (cssOptions == null) {
      cssOptions = [];
    }
    if (defaultFrameVars == null) {
      defaultFrameVars = [];
    }
    if (preprocessContainer != null) {
      preprocessContainer($("#wt-container"));
    }
    this.constructorOptions = {};
    _ref1 = this.constructorArgs;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      _ref2 = _ref1[_i], attr = _ref2[0], type = _ref2[1], defaultVal = _ref2[2];
      switch (type) {
        case "bool":
          this.constructorOptions[attr] = $("<input>", {
            type: "checkbox"
          });
          break;
        case "string":
        case "json":
          this.constructorOptions[attr] = $("<input>", {
            type: "text",
            value: defaultVal
          });
      }
      $("#wt-constructor-tr").after($("<tr>").append($("<td>", {
        text: attr
      }), $("<td>").append(this.constructorOptions[attr])));
    }
    $("#wt-constructor").on("click", function() {
      return _this.runConstructor();
    });
    $("#wt-setup").on("click", function() {
      $(".wt-event-button").removeClass("wt-active-button");
      $("#wt-setup").addClass("wt-active-button");
      _this.widget.event("setup", _this.stash = {
        _inputVars: []
      }, _this);
      return _this.log("sent 'setup' event");
    });
    setupEventButton = function(e) {
      return $("#wt-" + e).on("click", function() {
        $(".wt-event-button").removeClass("wt-active-button");
        $("#wt-" + e).addClass("wt-active-button");
        _this.widget.event(e);
        return _this.log("sent '" + e + "' event");
      });
    };
    _ref3 = ["displayStart", "displayStop", "editStart", "editStop", "destroy"];
    for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
      e = _ref3[_j];
      setupEventButton(e);
    }
    $("#wt-render").on("click", function() {
      var frame, i, value, varname, _k, _len2, _ref4;
      frame = {};
      _ref4 = [1, 2, 3];
      for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
        i = _ref4[_k];
        varname = $("#wt-varname" + i).val();
        value = $("#wt-varvalue" + i).val();
        if ((varname + value).length > 0) {
          frame[varname] = _this.JSONparse(value);
        }
      }
      type = $("#wt-render-type").val();
      _this.widget.event("render", frame, type);
      return _this.log(("sent 'render' event: type=" + type + ", frame=") + JSON.stringify(frame));
    });
    _ref4 = [1, 2, 3];
    for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
      i = _ref4[_k];
      if (defaultFrameVars[i - 1] != null) {
        $("#wt-varname" + i).val(defaultFrameVars[i - 1]);
      }
    }
    $("#wt-showstash").on("click", function() {
      return $("#wt-stash").val(JSON.stringify(_this.stash));
    });
    $("#wt-setstash").on("click", function() {
      _this.stash = _this.JSONparse($("#wt-stash").val());
      return _this.log("set stash to: " + $("#wt-stash").val());
    });
    addCssOption = function(opt) {
      var $checkbox;
      $checkbox = $("<input>", {
        type: "checkbox"
      }).on("click", function() {
        return $("#wt-container").toggleClass(opt);
      });
      return $("#wt-css-tr").after($("<tr>").append($("<td>", {
        text: opt
      }), $("<td>").append($checkbox)));
    };
    for (_l = 0, _len3 = cssOptions.length; _l < _len3; _l++) {
      o = cssOptions[_l];
      addCssOption(o);
    }
  }

  WidgetTest.prototype.runConstructor = function() {
    var args, attr, type, _i, _len, _ref, _ref1;
    args = {
      container: "wt-container"
    };
    _ref = this.constructorArgs;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], attr = _ref1[0], type = _ref1[1];
      switch (type) {
        case "bool":
          args[attr] = this.constructorOptions[attr].is(":checked");
          break;
        case "string":
          args[attr] = this.constructorOptions[attr].val();
          break;
        case "json":
          args[attr] = this.JSONparse(this.constructorOptions[attr].val());
      }
    }
    this.log("called widget constructor with args " + JSON.stringify(args));
    return this.widget = new this.objConstructor(args);
  };

  WidgetTest.prototype.trigger = function() {
    var args, type;
    type = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return this.log(("got a trigger from the widget of type '" + type + "', args=") + JSON.stringify(args));
  };

  WidgetTest.prototype.JSONparse = function(txt) {
    try {
      var tmp;

      return eval("tmp = " + txt);
      return JSON.parse(txt);
    } catch (err) {
      return txt;
    }
  };

  WidgetTest.prototype.log = function(msg) {
    var t;
    t = $("#wt-log");
    t.append(msg + "\n\n");
    return t.scrollTop(t[0].scrollHeight - t.height());
  };

  return WidgetTest;

})();
